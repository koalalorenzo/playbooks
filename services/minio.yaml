---
- name: MinIO setup
  hosts: nas
  become: yes
  become_user: root
  become_method: sudo
  gather_facts: yes

  handlers:
    - name: Restart nginx
      service: name=nginx state=restarted
    - name: Restart minio
      systemd: name=minio state=restarted daemon_reload=true

  tasks:
    - name: Load encrypted credentials
      community.sops.load_vars:
        file: minio.sops.yaml

    - name: Gets binary (arm64)
      get_url:
        url: "https://dl.min.io/server/minio/release/linux-arm64/minio"
        dest: "/usr/bin/minio"
      when: ansible_machine == "aarch64"
      notify: Restart minio

    - name: Gets binary (others)
      get_url:
        url: "https://dl.min.io/server/minio/release/linux-{{ ansible_machine }}/minio"
        dest: "/usr/bin/minio"
      when: ansible_machine != "aarch64"
      notify: Restart minio

    - name: Change file ownership, group and permissions
      file:
        path: /usr/bin/minio
        owner: root
        group: root
        mode: 0755

    - name: Gets client binary (arm64)
      get_url:
        url: "https://dl.min.io/client/mc/release/linux-arm64/mc"
        dest: "/usr/bin/mc"
      when: ansible_machine == "aarch64"

    - name: Gets client binary (others)
      get_url:
        url: "https://dl.min.io/client/mc/release/linux-{{ ansible_machine }}/mc"
        dest: "/usr/bin/mc"
      when: ansible_machine != "aarch64"

    - name: Change file ownership, group and permissions
      file:
        path: /usr/bin/mc
        owner: root
        group: root
        mode: 0755

    - name: Allow Minio on Tailscale
      ufw:
        rule: allow
        proto: tcp
        port: '9000:9001'
        direction: in
        interface: tailscale0

    - name: Ensures minio user exists
      user:
        name: "minio"
        system: yes
        create_home: no

    - name: Makes sure permissions are correct
      file:
        path: /main/minio
        owner: "minio"
        state: directory
        mode: "0755"
        recurse: no
      notify: Restart minio

    - name: Setup minio config
      blockinfile:
        create: yes
        path: /etc/default/minio
        block: |
          # Volume to be used for MinIO server.
          MINIO_VOLUMES="/main/minio/"
          # Use if you want to run MinIO on a custom port.
          MINIO_OPTS="--address \":9000\" --console-address \":9001\" --anonymous"
          # Access Key of the server.
          MINIO_ROOT_USER="{{ minio_usr }}"
          # Secret key of the server.
          MINIO_ROOT_PASSWORD="{{ minio_pwd }}"
          # Enable Prometheus
          # MINIO_PROMETHEUS_AUTH_TYPE="public"
      notify: Restart minio

    - name: Setup minio systemd service
      blockinfile:
        create: yes
        path: /etc/systemd/system/minio.service
        block: |
          [Unit]
          Description=Minio
          Documentation=https://docs.minio.io
          RequiresMountsFor=/main/minio
          Wants=network-online.target
          After=network-online.target
          AssertFileIsExecutable=/usr/bin/minio

          # Max 5 retries on restart
          StartLimitInterval=90
          StartLimitBurst=30

          [Service]
          WorkingDirectory=/usr/local

          Restart=always
          RestartSec=30

          User=minio
          Group=minio

          PermissionsStartOnly=true
          EnvironmentFile=-/etc/default/minio
          # Sleeping 7 seconds to wait for sleep
          ExecStartPre=/bin/bash -c "/usr/bin/sleep 7 ; [ -n \"${MINIO_VOLUMES}\" ] || echo \"Variable MINIO_VOLUMES not set in /etc/defaults/minio.conf\""
          ExecStart=/usr/bin/minio server $MINIO_OPTS $MINIO_VOLUMES

          StandardOutput=journal
          StandardError=inherit

          # Specifies the maximum file descriptor number that can be opened by this process
          LimitNOFILE=65536

          # Disable timeout logic and wait until process is stopped
          TimeoutStopSec=0

          # SIGTERM signal is used to stop Minio
          KillSignal=SIGTERM

          SendSIGKILL=no
          SuccessExitStatus=0

          [Install]
          WantedBy=multi-user.target
      notify: Restart minio

    - name: Set nginx config for minio
      blockinfile:
        create: yes
        path: /etc/nginx/sites-enabled/minio
        block: |
          server {
            listen 443 ssl;
            server_name minio-api.setale.me;

            ssl_certificate      /etc/ssl/setale.me/cert.crt;
            ssl_certificate_key  /etc/ssl/setale.me/cert-priv.pem;
            ssl_protocols       TLSv1.2 TLSv1.3;

            ssl_ciphers                 ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256;
            ssl_prefer_server_ciphers   on;
            ssl_ecdh_curve              secp384r1;

            # To allow special characters in headers
            ignore_invalid_headers off;
            # Allow any size file to be uploaded.
            # Set to a value such as 1000m; to restrict file size to a specific value
            client_max_body_size 0;
            # To disable buffering
            proxy_buffering off;

            location / {
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header Host $http_host;

              proxy_connect_timeout 300;
              # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
              proxy_http_version 1.1;
              proxy_set_header Connection "";
              chunked_transfer_encoding off;

              proxy_pass http://localhost:9000;
            }
          }

          server {
            listen 443 ssl;
            server_name nasberry.fish-alpha.ts.net;

            ssl_certificate     /etc/ssl/{{ ansible_hostname }}.fish-alpha.ts.net.crt;
            ssl_certificate_key /etc/ssl/{{ ansible_hostname }}.fish-alpha.ts.net.key;
            ssl_protocols       TLSv1.2 TLSv1.3;

            ssl_ciphers                 ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256;
            ssl_prefer_server_ciphers   on;
            ssl_ecdh_curve              secp384r1;

            # To allow special characters in headers
            ignore_invalid_headers off;
            # Allow any size file to be uploaded.
            # Set to a value such as 1000m; to restrict file size to a specific value
            client_max_body_size 0;
            # To disable buffering
            proxy_buffering off;

            location / {
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header Host $http_host;

              proxy_connect_timeout 300;
              # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
              proxy_http_version 1.1;
              proxy_set_header Connection "";
              chunked_transfer_encoding off;

              proxy_pass http://localhost:9000;
            }
          }


          server {
            listen 443 ssl;
            server_name minio.setale.me;

            ssl_certificate      /etc/ssl/setale.me/cert.crt;
            ssl_certificate_key  /etc/ssl/setale.me/cert-priv.pem;
            ssl_protocols       TLSv1.2 TLSv1.3;

            ssl_ciphers                 ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256;
            ssl_prefer_server_ciphers   on;
            ssl_ecdh_curve              secp384r1;

            # To allow special characters in headers
            ignore_invalid_headers off;
            # Allow any size file to be uploaded.
            # Set to a value such as 1000m; to restrict file size to a specific value
            client_max_body_size 0;
            # To disable buffering
            proxy_buffering off;

            location / {
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header Host $http_host;

              proxy_connect_timeout 300;
              # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
              proxy_http_version 1.1;
              proxy_set_header Connection "";
              chunked_transfer_encoding off;

              proxy_pass http://localhost:9001;
            }
          }
      notify: Restart nginx

    - name: Enable minio service
      service:
        name: minio
        enabled: yes
      notify: Restart minio
