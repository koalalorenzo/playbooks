---
- name: NGINX setup with Tailscale Certs
  hosts:
  - nas
  - web
  become: yes
  become_user: root
  become_method: sudo
  gather_facts: no

  handlers:
    - name: Restart nginx
      service: name=nginx state=restarted

  tasks:
    - name: "Install packages"
      package:
        name: "nginx"
        update_cache: yes
        state: present

    - name: Grant access to HTTP via Tailscale
      ufw:
        rule: allow
        direction: in
        interface: tailscale0
        port: 80
        proto: tcp

    - name: Grant access to HTTPS via Tailscale
      ufw:
        rule: allow
        direction: in
        interface: tailscale0
        port: 443
        proto: tcp

    - name: Set nginx config for munin
      file:
        state: absent
        path: /etc/nginx/sites-enabled/default
      notify: Restart nginx

    - name: Get HTTPS Certificates from tailscale
      shell: tailscale cert --cert-file /etc/ssl/{{ ansible_host }}.fish-alpha.ts.net.crt --key-file /etc/ssl/{{ ansible_host }}.fish-alpha.ts.net.key {{ ansible_host }}.fish-alpha.ts.net

    - name: Set nginx config for main
      blockinfile:
        create: yes
        path: /etc/nginx/sites-enabled/main
        block: |
          server {
            listen 443 ssl;
            server_name _;

            ssl_certificate     /etc/ssl/{{ ansible_host }}.fish-alpha.ts.net.crt;
            ssl_certificate_key /etc/ssl/{{ ansible_host }}.fish-alpha.ts.net.key;
            ssl_protocols       TLSv1.2 TLSv1.3;

            ssl_ciphers                 ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256;
            ssl_prefer_server_ciphers   on;
            ssl_ecdh_curve              secp384r1;

            ### Minio SETUP START

            # To allow special characters in headers
            ignore_invalid_headers off;
            # Allow any size file to be uploaded.
            # Set to a value such as 1000m; to restrict file size to a specific value
            client_max_body_size 0;
            # To disable buffering
            proxy_buffering off;

            location /restic/ {
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header Host $http_host;

              proxy_connect_timeout 300;
              # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
              proxy_http_version 1.1;
              proxy_set_header Connection "";
              chunked_transfer_encoding off;

              proxy_pass http://localhost:9000;
            }

            ### Minio SETUP END

            rewrite ^/$ https://setale.me/ redirect;
          }

          server {
            listen 80;
            server_name _;

            return 302 https://$host$request_uri;
          }
      notify: Restart nginx

    - name: Set nginx config for status report
      blockinfile:
        create: yes
        path: /etc/nginx/sites-enabled/status
        block: |
          server {
            listen 81;
            server_name localhost;

            access_log off;
            allow 127.0.0.1;
            deny all;

            location /nginx_status {
              # Choose your status module

              # freely available with open source NGINX
              stub_status;

              # ensures the version information can be retrieved
              server_tokens on;
            }
          }
      notify: Restart nginx

    - name: Set json output for grafana
      blockinfile:
        create: yes
        path: /etc/nginx/conf.d/grafana-cloud-nginx-integration.conf
        block: |
          log_format json_analytics escape=json '{'
            '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
            '"connection": "$connection", ' # connection serial number
            '"connection_requests": "$connection_requests", ' # number of requests made in connection
            '"pid": "$pid", ' # process pid
            '"request_id": "$request_id", ' # the unique request id
            '"request_length": "$request_length", ' # request length (including headers and body)
            '"remote_addr": "$remote_addr", ' # client IP
            '"remote_user": "$remote_user", ' # client HTTP username
            '"remote_port": "$remote_port", ' # client port
            '"time_local": "$time_local", '
            '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
            '"request": "$request", ' # full path no arguments if the request
            '"request_uri": "$request_uri", ' # full path and arguments if the request
            '"args": "$args", ' # args
            '"status": "$status", ' # response status code
            '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
            '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
            '"http_referer": "$http_referer", ' # HTTP referer
            '"http_user_agent": "$http_user_agent", ' # user agent
            '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
            '"http_host": "$http_host", ' # the request Host: header
            '"server_name": "$server_name", ' # the name of the vhost serving the request
            '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
            '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
            '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
            '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
            '"upstream_response_time": "$upstream_response_time", ' # time spent receiving upstream body
            '"upstream_response_length": "$upstream_response_length", ' # upstream response length
            '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
            '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
            '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
            '"scheme": "$scheme", ' # http or https
            '"request_method": "$request_method", ' # request method
            '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
            '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
            '"gzip_ratio": "$gzip_ratio"'
          '}';

          access_log /var/log/nginx/json_access.log json_analytics;
      notify: Restart nginx

    - name: Enable NGINX
      service:
        name: nginx
        enabled: yes

    - name: Allow HTTP on Tailscale
      ufw:
        rule: allow
        interface: tailscale0
        direction: in
        port: 80
        proto: tcp

    - name: Allow HTTPS on Tailscale
      ufw:
        rule: allow
        interface: tailscale0
        direction: in
        port: 443
        proto: tcp

