---
- name: Write Config for Nomad machines
  hosts: nomad
  become: yes
  become_user: root
  become_method: sudo
  gather_facts: yes

  handlers:
    - name: Reload Nomad
      service: name=nomad state=reloaded
    - name: Restart Nomad
      service: name=nomad state=restarted

  tasks:
    - file:
        path: /etc/nomad.d
        state: directory
        mode: "0700"

    - file:
        path: "{{ item.path }}"
        state: directory
      loop: "{{ host_volumes }}"

    - name: Adds Nomad base configuration
      copy:
        dest: /etc/nomad.d/nomad.hcl
        mode: 0700
        content: |
          datacenter = "dc1"
          data_dir  = "/opt/nomad/data"
          bind_addr = "0.0.0.0"

          log_rotate_duration = "24h"
          log_rotate_max_files = 7

          telemetry {
           collection_interval = "60s", # Must match or less than prometheus scrape_interval
           publish_allocation_metrics = true,
           publish_node_metrics = true,
           prometheus_metrics = true
          }

          ui {
            enabled = true
            consul {
              ui_url = "http://consul.elates.it/ui"
            }
          }

          consul {
            address = "127.0.0.1:8500"

            # The service name to register the server and client with Consul.
            server_service_name = "nomad"
            client_service_name = "nomad-client"
            auto_advertise = true
            server_auto_join = true
            client_auto_join = true
          }

          advertise {
            # Defaults to the first private IP address. Using Tailscale instead
            http = "{{ ansible_all_ipv4_addresses | ansible.utils.ipaddr('100.64.0.0/10') | first }}"
            rpc = "{{ ansible_all_ipv4_addresses | ansible.utils.ipaddr('100.64.0.0/10') | first }}"
            serf = "{{ ansible_all_ipv4_addresses | ansible.utils.ipaddr('100.64.0.0/10') | first }}"
          }
      notify: Reload Nomad

    - name: Adds Client configuration
      copy:
        dest: /etc/nomad.d/client.hcl
        mode: 0700
        content: |
          client {
            enabled = true

            gc_interval = "5m"

            # Uses Tailscale as network interface
            network_interface = "tailscale0"

            {% if nomad_node_class %}
            node_class = "{{ nomad_node_class }}"
            {% endif %}

            {% if nomad_node_pool %}
            node_pool = "{{ nomad_node_pool }}"
            {% endif %}

            meta {
            {% for key, value in nomad_node_meta.items() %}
              {{ key }} = "{{ value }}"
            {% endfor %}
            }
            
            options = {
              {% for key, value in nomad_client_options.items() %}
              "{{ key }}" = "{{ value }}"
              {% endfor %}
            }

            servers = [{% for i in groups['nomadServers'] %}"{{ i }}.{{tailscale_domain}}",{% endfor %}]

            host_volume "ca-certificates" {
              path = "/etc/ssl/certs"
              read_only = true
            }

            {% for host in host_volumes %}
            
            host_volume "{{ host.name }}" {
              path = "{{ host.path }}"
              read_only = {% if host.read_only %}true{% else %}false{% endif %}
            }
            
            {% endfor %}

            reserved {
              {% if nomad_node_class == "storage"  %}
              
              cpu    = 1250 # OpenZFS
              memory = 3072 # OpenZFS
              
              {% elif nomad_node_class == "batch" %}
              
              cpu    = 50
              memory = 32
              
              {% else %}
              
              cpu    = 500
              memory = 256
              
              {% endif %}
            }

            artifact {
              disable_filesystem_isolation = true
            }
          }

          plugin "raw_exec" {
            config {
              enabled = true
            }
          }

          plugin "docker" {
            config {
              allow_privileged = true

              gc {
                image       = true
                image_delay = "72h"
                container   = true
              }

              volumes {
                # Allows mounting local paths
                enabled = true
              }
            }
          }
      notify: Restart Nomad

- name: Set config for nomad servers
  hosts: nomadServers
  become: yes
  become_user: root
  become_method: sudo
  gather_facts: yes

  handlers:
    - name: Restart Nomad
      service: name=nomad state=restarted

  tasks:
    - name: Adds Nomad Server configuration
      copy:
        dest: /etc/nomad.d/server.hcl
        mode: 0700
        content: |
          server {
            enabled = true
            bootstrap_expect = {{ bootstrap_quorum }}

            # Remove Nodes after this time
            node_gc_threshold = "6h"

            # How often should we run the GC?
            job_gc_interval = "1h"
            
            # What is the threshold for considering jobs ready to be cleaned?
            job_gc_threshold = "48h"

            csi_volume_claim_gc_interval = "15m"

            default_scheduler_config {
              scheduler_algorithm = "spread"
            }
          }
      notify: Restart Nomad
