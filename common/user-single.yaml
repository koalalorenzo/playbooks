---
- name: Ensure user exists
  user:
    name: "{{ username }}"
    append: true
    state: present
    system: false
    update_password: on_create
    shell: /bin/bash
    groups:
      - audio
      - cdrom
      - dialout
      - games
      - gpio
      - i2c
      - input
      - netdev
      - plugdev
      - render
      - spi
      - users
      - video

- name: Ensure user is sudoers
  user:
    name: "{{ username }}"
    append: true
    state: present
    groups:
      - sudo
  when: is_admin

- name: Authorize keys
  authorized_key:
    user: "{{ username }}"
    state: present
    key: "{{ url }}"
  loop: "{{ pubkeys_urls }}"
  loop_control:
    loop_var: url

- name: Download GPG/PGP Keys
  shell: gpg --recv-keys {{ gpg_key_fingerprints | join(' ') }}
  become: yes
  become_user: "{{ username }}"
  ignore_errors: true

- name: Uses Bash shell
  cron:
    user: "{{ username }}"
    name: SHELL
    env: yes
    job: /bin/bash

# - name: Adds Email notification
#   cron:
#     user: "{{ username }}"
#     name: MAILTO
#     env: yes
#     job: "{{ email }}"
#   when: email

# - name: Adds GPG Key on cron to encrypt messages from cron (pipe to GPG_CMD)
#   cron:
#     user: "{{ username }}"
#     name: GPG_CMD
#     env: yes
#     job: ifne /usr/bin/gpg --batch --armor --trust-model always --recipient {{ gpg_key_fingerprints | join (' --recipient ') }} --encrypt
#   when: email

- name: Insert Variables
  blockinfile:
    path: /home/{{ username }}/.profile
    marker: "## {mark} ANSIBLE MANAGED BLOCK {{ variable.key }} ##"
    block: |
      export {{ variable.key }}="{{ variable.value }}"
  loop: "{{ env_vars | dict2items }}"
  loop_control:
    loop_var: variable

- name: Allow user to reboot/shutdown without password
  blockinfile:
    path: /etc/sudoers
    marker: "## {mark} ANSIBLE MANAGED BLOCK allow reboot and shutdown ##"
    block: |
      {{ username }} ALL = NOPASSWD: /sbin/reboot, /sbin/shutdown
