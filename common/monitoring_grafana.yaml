
---
- name: Setup Grafana Agent
  hosts: all
  become: yes
  become_user: root
  become_method: sudo
  gather_facts: yes

  handlers:
    - name: Restart grafana-agent
      service: name=grafana-agent state=restarted

  tasks:
    - name: Load encrypted credentials
      community.sops.load_vars:
        file: monitoring_grafana.sops.yaml

    - name: gather installed packages
      package_facts:

    - when: not "grafana-agent" in ansible_facts.packages
      block:
      - uri:
          url: https://api.github.com/repos/grafana/agent/releases/latest
          return_content: true
        register: json_reponse

      - when: ansible_machine == "aarch64"
        block:
        - name: Download package (arch64)
          apt:
            deb: "{{ item }}"
          when: (".deb" in item) and ("arm64" in item)
          with_items:
            - "{{ json_reponse.json.assets | json_query('[].browser_download_url') }}"
          notify: Restart grafana-agent

      - when: ansible_machine == "armv6l"
        block:
        - name: Download package (armv6l)
          apt:
            deb: "{{ item }}"
          when: (".deb" in item) and ("armv6" in item)
          with_items:
            - "{{ json_reponse.json.assets | json_query('[].browser_download_url') }}"
          notify: Restart grafana-agent

      - when: ansible_machine != "aarch64" and ansible_machine != "armv6"
        block:
        - name: Download package (other)
          apt:
            deb: "{{ item }}"
          when: (".deb" in item) and (ansible_machine in item)
          with_items:
            - "{{ json_reponse.json.assets | json_query('[].browser_download_url') }}"
          notify: Restart grafana-agent

    - name: Sync Grafana Cloud Agent Config
      when: not "grafana-agent" in ansible_facts.packages
      shell: |
        grafana-agentctl cloud-config \
          -u "{{ grafana_stack_id }}" \
          -p "{{ grafana_api_key }}" \
          -e "{{ grafana_api_url }}" > /etc/grafana-agent.yaml
      notify: Restart grafana-agent

    - name: Replace NGINX path
      replace:
        path: /etc/grafana-agent.yaml
        regexp: "<path to json nginx access log>"
        replace: /var/log/nginx/json_access.log
      notify: Restart grafana-agent

    - name: Replace NGINX hostname
      replace:
        path: /etc/grafana-agent.yaml
        regexp: "<http_hostname>"
        replace: "{{ ansible_hostname }}"
      notify: Restart grafana-agent

    - name: Replace node_exporter hostname
      replace:
        path: /etc/grafana-agent.yaml
        regexp: "replacement: hostname"
        replace: "replacement: {{ ansible_hostname }}"
      notify: Restart grafana-agent

    - name: Replace hostname to proper value
      replace:
        path: /etc/grafana-agent.yaml
        regexp: "instance: hostname"
        replace: "instance: {{ ansible_hostname }}"
      notify: Restart grafana-agent

    - name: Increase scraping to every 30 seconds
      replace:
        path: /etc/grafana-agent.yaml
        regexp: "scrape_interval: 60s"
        replace: "scrape_interval: 30s"
      notify: Restart grafana-agent

    - name: Setup process_expoter in Grafana
      blockinfile:
        path: /etc/grafana-agent.yaml
        insertafter: "integrations:"
        block: |
          # Process with comment to keep indentation
            process_exporter:
              enabled: true
              process_names:
              - name: "{{ '{{.Comm}}' }}"
                cmdline:
                - '.+'
      notify: Restart grafana-agent

    - name: Enable Grafana Agent
      service:
        name: grafana-agent
        enabled: yes
      notify: Restart grafana-agent
