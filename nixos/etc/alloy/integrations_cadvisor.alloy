//Docker Integration

prometheus.exporter.cadvisor "integrations_cadvisor" {
    docker_only = true
}

discovery.relabel "integrations_cadvisor" {
    targets = prometheus.exporter.cadvisor.integrations_cadvisor.targets

    rule {
        target_label = "job"
        replacement  = "integrations/docker"
    }

    rule {
        target_label = "instance"
        replacement  = constants.hostname
    }

    rule {
        source_labels = ["__meta_docker_container_name"]
        regex         = "/(.*)"
        target_label  = "container"
    }

    rule {
      action = "labelmap"
      regex  = "__meta_docker_container_label_com_hashicorp_nomad_(.*)"
      replacement = "nomad_$${1}"
    }
}

prometheus.relabel "integrations_cadvisor" {
	forward_to = [prometheus.remote_write.metrics_service.receiver]

	rule {
		source_labels = ["__name__"]
		regex         = "up|container_cpu_usage_seconds_total|container_fs_inodes_free|container_fs_inodes_total|container_fs_limit_bytes|container_fs_usage_bytes|container_last_seen|container_memory_usage_bytes|container_network_receive_bytes_total|container_network_tcp_usage_total|container_network_transmit_bytes_total|container_spec_memory_reservation_limit_bytes|machine_memory_bytes|machine_scrape_error"
		action        = "keep"
	}
}

prometheus.scrape "integrations_cadvisor" {
  targets    = discovery.relabel.integrations_cadvisor.output
  forward_to = [prometheus.relabel.integrations_cadvisor.receiver]
}

// Docker Integration (logs)

discovery.docker "logs_integrations_docker" {
    host             = "unix:///var/run/docker.sock"
    refresh_interval = "5s"
}

discovery.relabel "logs_integrations_docker" {
    targets = []

    rule {
        target_label = "job"
        replacement  = "integrations/docker"
    }

    rule {
        target_label = "instance"
        replacement  = constants.hostname
    }

    rule {
        source_labels = ["__meta_docker_container_name"]
        regex         = "/(.*)"
        target_label  = "container"
    }

    rule {
        source_labels = ["__meta_docker_container_log_stream"]
        target_label  = "stream"
    }

    rule {
      action = "labelmap"
      regex  = "__meta_docker_container_label_com_hashicorp_nomad_(.*)"
      replacement = "nomad_$${1}"
    }

    rule {
      action = "labelmap"
      regex  = "__meta_docker_container_label_persist_logs"
      replacement = "persist_logs"
    }
}

loki.source.docker "logs_integrations_docker" {
    host             = "unix:///var/run/docker.sock"
    targets          = discovery.docker.logs_integrations_docker.targets
    forward_to       = [loki.process.docker.receiver]
    relabel_rules    = discovery.relabel.logs_integrations_docker.rules
    refresh_interval = "5s"
}

// Custom rules/stages to process logs from Docker container before sending to global process
loki.process "docker" {
  forward_to = [loki.process.global.receiver]

  // stage.docker {}

  // Adds a perist_log="true" to traefik, restic and nginx
  stage.match {
    selector = "{container=~\"(traefik|restic|nginx).*\"}"
    action = "keep"

    stage.static_labels {
        values = {
          persist_logs = "true",
        }
    }
  }

  stage.drop {
    source = "service_name,container"
    expression = ".*nfs.*"
    drop_counter_reason = "nfs"
  }

  stage.match {
    selector = "{persist_logs!=\"true\"}"
    action   = "drop"

    drop_counter_reason = "manually_excluded"
  }

  stage.drop {
    expression = ".*context canceled.*"
    drop_counter_reason = "generic_context_canceled"
  }

  // Unity / Epic / Errors that are not useful from vrising
  stage.match {
    selector = "{container=~\"(gameserver|vrising).*\"}"
    action = "keep"

    stage.drop {
      expression = ".*(Unity|Epic.OnlineServices|EOS|eos).*"
      drop_counter_reason = "gameserver_spam_engine"
    }
  }
}
